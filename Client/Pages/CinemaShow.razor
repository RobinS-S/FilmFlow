@page "/cinemashow/{id:long}"
@using FilmFlow.Shared.Dto;
@using FilmFlow.Shared.Enums;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@inherits BaseComponent
@inject IJSRuntime JSRuntime
@attribute [Authorize]

@if (hall != null && seats != null)
{
    <h3>@Localizer["ChooseYourSeats"]</h3>
    <p>@Localizer["SeatsPlanned"]: @seatsPlanned</p>
    <div class="card-body">

        @foreach (var row in seats)
        {
            <div class="d-flex flex-row justify-content-center align-items-center">
                @foreach (var seat in row.Value)
                {
                <img src="@GetSeatImage(row.Key, seat.Key)" @onclick="() => ToggleSelected(row.Key, seat.Key)" class="cinema-show-seat"/>
                }
            </div>
        }
    </div>
    <button @onclick="CreateReservation" disabled="@(seatsPlanned == 0)">@Localizer["CreateReservation"]</button>
}

@code {
    [Parameter]
    public long id { get; set; }

    private CinemaHallDto? hall;
    private CinemaShowDto? show;
    private int seatsPlanned;
    private Dictionary<int, Dictionary<int, string>>? seats;
    private List<ReservationSeatDto>? reservedSeats;

    protected override async Task OnInitializedAsync()
    {
        show = await AnonymousHttpClient.Client.GetFromJsonAsync<CinemaShowDto>(ApiCallUrls.CinemaShowById(id));
        reservedSeats = await AnonymousHttpClient.Client.GetFromJsonAsync<List<ReservationSeatDto>>(ApiCallUrls.ReservedSeatsForShow(id));
        if(show != null)
        {
            hall = await AnonymousHttpClient.Client.GetFromJsonAsync<CinemaHallDto>(ApiCallUrls.CinemaHallById(show.CinemaHallId));

            if (hall != null)
            {
                seats = new Dictionary<int, Dictionary<int, string>>();
                foreach (CinemaHallRowDto row in hall.Rows)
                {
                    seats.Add(row.RowId, new Dictionary<int, string>());
                    foreach(var chair in row.Seats)
                    {
                        seats[row.RowId].Add(chair.SeatNumber, "");
                    }
                }
            }
        }
    }

    private string GetSeatImage(int row, int seat)
    {
        if (seats == null || reservedSeats == null)
        {
            return "";
        }
        if (seats.TryGetValue(row, out var seatNumbers) && seatNumbers[seat] == "" && !reservedSeats.Any(rs => rs.Seat.ParentRowId == row && rs.Seat.SeatNumber == seat))
        {
            return "img/seat-available.png";
        }
        else if (seatNumbers?[seat] == "selected")
        {
            return "img/seat-selected.png";
        }
        else
        {
            return "img/seat-not-available.png";
        }
    }

    private void ToggleSelected(int row, int seat)
    {
        if (seats == null || reservedSeats == null || reservedSeats.Any(rs => rs.Seat.ParentRowId == row && rs.Seat.SeatNumber == seat))
        {
            return;
        }
        if (seats.TryGetValue(row, out var seatNumbers) && seatNumbers.TryGetValue(seat, out var isSelected))
        {
            if (isSelected == "")
            {
                seats[row][seat] = "selected";
                seatsPlanned++;
            }
            else if (isSelected == "selected")
            {
                seats[row][seat] = "";
                seatsPlanned--;
            }
            StateHasChanged();
        }
    }

    private async Task CreateReservation()
    {
        if (hall == null || seats == null)
        {
            return;
        }
        var selectedRows = seats.Where(row => row.Value.Any(s => s.Value != ""));
        var takenSeats = selectedRows.SelectMany(r => r.Value.Where(rv => rv.Value != "").Select(st => new CreateReservationSeatDto() { SeatId = hall.Rows.Single(hr => hr.RowId == r.Key).Seats.Single(hs => hs.SeatNumber == st.Key).Id, Tarriff = TarriffType.NORMAL }));
        var createReservationDto = new CreateReservationDto() { CinemaShowId = id, Seats = takenSeats.ToList() };

        if (JSRuntime != null)
        {
            try
            {
                var response = await AuthorizedHttpClient.Client.PostAsJsonAsync(ApiCallUrls.ReservationForCinemaShow(id), createReservationDto);
                var createdReservation = await response.Content.ReadFromJsonAsync<ReservationDto>();
                if (createdReservation != null)
                {
                    await JSRuntime.InvokeVoidAsync("alert", Localizer["ReservationCreated", createdReservation.Id].ToString());
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", Localizer["ReservationCreationFailed"].ToString());
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }
}