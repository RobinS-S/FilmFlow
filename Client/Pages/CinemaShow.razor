@page "/cinemashow/{id:long}"
@using FilmFlow.Shared.Dto;
@using FilmFlow.Shared.Enums;
@using FilmFlow.Shared;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@inherits BaseComponent
@inject IJSRuntime JsRuntime
@attribute [Authorize]
@inject NavigationManager Navigation

@if (_hall != null && _seats != null)
{
    <h3>@Localizer["ChooseYourSeats"]</h3>
    <p>@Localizer["SeatsPlanned"]: @_seatsPlanned</p>
    <div class="card-body">

        @foreach (var row in _seats)
        {
            <div class="d-flex flex-row justify-content-center align-items-center">
                <strong>@Localizer["Row"] @row.Key</strong>
                @foreach (var seat in row.Value)
                {
                    <div class="text-center">
                        <img src="@GetSeatImage(row.Key, seat.Key)" @onclick="() => ToggleSelected(row.Key, seat.Key)" class="cinema-show-seat"/>
                        <h6>@seat.Key</h6>
                    </div>
                }
            </div>
        }


        @foreach (var row in _seats)
        {
            <div class="d-flex flex-row justify-content-center align-items-center">
                @foreach (var seat in row.Value)
                {
                    @if (_seats[row.Key][seat.Key] != "")
                    {
                        <div class="text-center mx-1">
                            <strong>@Localizer["Row"] @row.Key, Seat @seat.Key</strong>
                            <strong>Price: €@Tariffs.GetTariffPrice(Enum.Parse<TariffType>(@seat.Value), _hall.IsThreeDimensional) @(_hall.IsThreeDimensional ? "3D" : "")</strong>
                            @if (!_show?.IsSecret ?? true)
                            {
                                <select @bind="_seats[row.Key][seat.Key]" class="form-select form-select-sm text-light" style="background-color: #050505;">
                                    <option value="Normal">@Localizer["TariffType.Normal"]</option>
                                    <option value="Children">@Localizer["TariffType.Children"]</option>
                                    <option value="Students">@Localizer["TariffType.Students"]</option>
                                    <option value="Seniors">@Localizer["TariffType.Seniors"]</option>
                                </select>
                            }
                        </div>
                    }
                }
            </div>
        }
    </div>
    <button @onclick="CreateReservation" disabled="@(_seatsPlanned == 0)">@Localizer["CreateReservation"]</button>
}

@code {
    [Parameter]
    public long Id { get; set; }

    private CinemaHallDto? _hall;
    private CinemaShowDto? _show;
    private int _seatsPlanned;
    private Dictionary<int, Dictionary<int, string>>? _seats;
    private List<ReservationSeatDto>? _reservedSeats;

    protected override async Task OnInitializedAsync()
    {
        _show = await AnonymousHttpClient.Client.GetFromJsonAsync<CinemaShowDto>(ApiCallUrls.CinemaShowById(Id));
        _reservedSeats = await AnonymousHttpClient.Client.GetFromJsonAsync<List<ReservationSeatDto>>(ApiCallUrls.ReservedSeatsForShow(Id));
        if(_show != null)
        {
            _hall = await AnonymousHttpClient.Client.GetFromJsonAsync<CinemaHallDto>(ApiCallUrls.CinemaHallById(_show.CinemaHallId));

            if (_hall != null)
            {
                _seats = new Dictionary<int, Dictionary<int, string>>();
                foreach (var row in _hall.Rows)
                {
                    _seats.Add(row.RowId, new Dictionary<int, string>());
                    foreach(var chair in row.Seats)
                    {
                        _seats[row.RowId].Add(chair.SeatNumber, "");
                    }
                }
            }
        }
    }

    private string GetSeatImage(int row, int seat)
    {
        if (_seats == null || _reservedSeats == null || _hall == null)
        {
            return "";
        }
        if (_seats.TryGetValue(row, out var seatNumbers) && seatNumbers[seat] == ""
            && !_reservedSeats.Any(rs => {
                var hallRow = _hall.Rows.Single(hr => hr.RowId == row);
                var hallSeat = hallRow.Seats.SingleOrDefault(hrs => hrs.Id == rs.SeatId);
                return hallRow.RowId == row && hallSeat != null && hallSeat.SeatNumber == seat;
            }))
        {
            return "img/seat-available.png";
        }
        else if (seatNumbers?[seat] != "")
        {
            return "img/seat-selected.png";
        }
        else
        {
            return "img/seat-not-available.png";
        }
    }

    private void ToggleSelected(int row, int seat)
    {
        if (_seats == null || _reservedSeats == null || _reservedSeats.Any(rs => rs.Seat.ParentRowId == row && rs.Seat.SeatNumber == seat) || _show == null)
        {
            return;
        }
	    if (!_seats.TryGetValue(row, out var seatNumbers) || !seatNumbers.TryGetValue(seat, out var isSelected)) return;
	    
	    if (isSelected == "")
	    {
		    _seats[row][seat] = _show.IsSecret ? TariffType.Secret.ToString() : TariffType.Normal.ToString();
		    _seatsPlanned++;
	    }
	    else if (isSelected != "")
	    {
		    _seats[row][seat] = "";
		    _seatsPlanned--;
	    }
	    StateHasChanged();
    }

    private async Task CreateReservation()
    {
        if (_hall == null || _seats == null)
        {
            return;
        }
        var selectedRows = _seats.Where(row => row.Value.Any(s => s.Value != ""));
        var takenSeats = selectedRows.SelectMany(r => r.Value.Where(rv => rv.Value != "").Select(st => new CreateReservationSeatDto() { SeatId = _hall.Rows.Single(hr => hr.RowId == r.Key).Seats.Single(hs => hs.SeatNumber == st.Key).Id, Tariff = Enum.Parse<TariffType>(st.Value) }));
        var createReservationDto = new CreateReservationDto() { CinemaShowId = Id, Seats = takenSeats.ToList() };

        if (JsRuntime != null)
        {
            try
            {
                var response = await AuthorizedHttpClient.Client.PostAsJsonAsync(ApiCallUrls.ReservationForCinemaShow(Id), createReservationDto);
                if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
                {
                    await JsRuntime.InvokeVoidAsync("alert", Localizer["ReservationChairsAlreadyTaken"].ToString());
                }
                else
                {
                    var createdReservation = await response.Content.ReadFromJsonAsync<ReservationDto>();
                    if (createdReservation != null)
                    {
                        Navigation.NavigateTo($"reservations/{createdReservation.Id}");
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("alert", Localizer["ReservationCreationFailed"].ToString());
                    }
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }
}