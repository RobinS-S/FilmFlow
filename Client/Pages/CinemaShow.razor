@page "/cinemashow/{id:long}"
@using FilmFlow.Shared.Dto;
@using FilmFlow.Shared.Enums;
@using FilmFlow.Shared;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@inherits BaseComponent
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@inject NavigationManager Navigation

@if (hall != null && seats != null)
{
    <h3>@Localizer["ChooseYourSeats"]</h3>
    <p>@Localizer["SeatsPlanned"]: @seatsPlanned</p>
    <div class="card-body">

        @foreach (var row in seats)
        {
            <div class="d-flex flex-row justify-content-center align-items-center">
                <strong>@Localizer["Row"] @row.Key</strong>
                @foreach (var seat in row.Value)
                {
                    <div class="text-center">
                        <img src="@GetSeatImage(row.Key, seat.Key)" @onclick="() => ToggleSelected(row.Key, seat.Key)" class="cinema-show-seat"/>
                        <h6>@seat.Key</h6>
                    </div>
                }
            </div>
        }


        @foreach (var row in seats)
        {
            <div class="d-flex flex-row justify-content-center align-items-center">
                @foreach (var seat in row.Value)
                {
                    @if (seats[row.Key][seat.Key] != "")
                    {
                        <div class="text-center mx-1">
                            <strong>@Localizer["Row"] @row.Key, Seat @seat.Key</strong>
                            <strong>Price: €@Tarriffs.GetTarriffPrice(Enum.Parse<TarriffType>(@seat.Value), hall.IsThreeDimensional) @(hall.IsThreeDimensional ? "3D" : "")</strong>
                            @if (!show?.IsSecret ?? true)
                            {
                                <select @bind="seats[row.Key][seat.Key]" class="form-select form-select-sm text-light" style="background-color: #050505;">
                                    <option value="NORMAL">@Localizer["TarriffType.NORMAL"]</option>
                                    <option value="CHILDREN">@Localizer["TarriffType.CHILDREN"]</option>
                                    <option value="STUDENTS">@Localizer["TarriffType.STUDENTS"]</option>
                                    <option value="SENIORS">@Localizer["TarriffType.SENIORS"]</option>
                                </select>
                            }
                        </div>
                    }
                }
            </div>
        }
    </div>
    <button @onclick="CreateReservation" disabled="@(seatsPlanned == 0)">@Localizer["CreateReservation"]</button>
}

@code {
        [Parameter]
        public long id { get; set; }

    private CinemaHallDto? hall;
    private CinemaShowDto? show;
    private int seatsPlanned;
    private Dictionary<int, Dictionary<int, string>>? seats;
    private List<ReservationSeatDto>? reservedSeats;

    protected override async Task OnInitializedAsync()
    {
        show = await AnonymousHttpClient.Client.GetFromJsonAsync<CinemaShowDto>(ApiCallUrls.CinemaShowById(id));
        reservedSeats = await AnonymousHttpClient.Client.GetFromJsonAsync<List<ReservationSeatDto>>(ApiCallUrls.ReservedSeatsForShow(id));
        if(show != null)
        {
            hall = await AnonymousHttpClient.Client.GetFromJsonAsync<CinemaHallDto>(ApiCallUrls.CinemaHallById(show.CinemaHallId));

            if (hall != null)
            {
                seats = new Dictionary<int, Dictionary<int, string>>();
                foreach (CinemaHallRowDto row in hall.Rows)
                {
                    seats.Add(row.RowId, new Dictionary<int, string>());
                    foreach(var chair in row.Seats)
                    {
                        seats[row.RowId].Add(chair.SeatNumber, "");
                    }
                }
            }
        }
    }

    private string GetSeatImage(int row, int seat)
    {
        if (seats == null || reservedSeats == null || hall == null)
        {
            return "";
        }
        if (seats.TryGetValue(row, out var seatNumbers) && seatNumbers[seat] == ""
            && !reservedSeats.Any(rs => {
                var hallRow = hall.Rows.Single(hr => hr.RowId == row);
                var hallSeat = hallRow.Seats.SingleOrDefault(hrs => hrs.Id == rs.SeatId);
                return hallRow.RowId == row && hallSeat != null && hallSeat.SeatNumber == seat;
            }))
        {
            return "img/seat-available.png";
        }
        else if (seatNumbers?[seat] != "")
        {
            return "img/seat-selected.png";
        }
        else
        {
            return "img/seat-not-available.png";
        }
    }

    private void ToggleSelected(int row, int seat)
    {
        if (seats == null || reservedSeats == null || reservedSeats.Any(rs => rs.Seat.ParentRowId == row && rs.Seat.SeatNumber == seat) || show == null)
        {
            return;
        }
        if (seats.TryGetValue(row, out var seatNumbers) && seatNumbers.TryGetValue(seat, out var isSelected))
        {
            if (isSelected == "")
            {
                seats[row][seat] = show.IsSecret ? TarriffType.SECRET.ToString() : TarriffType.NORMAL.ToString();
                seatsPlanned++;
            }
            else if (isSelected != "")
            {
                seats[row][seat] = "";
                seatsPlanned--;
            }
            StateHasChanged();
        }
    }

    private async Task CreateReservation()
    {
        if (hall == null || seats == null)
        {
            return;
        }
        var selectedRows = seats.Where(row => row.Value.Any(s => s.Value != ""));
        var takenSeats = selectedRows.SelectMany(r => r.Value.Where(rv => rv.Value != "").Select(st => new CreateReservationSeatDto() { SeatId = hall.Rows.Single(hr => hr.RowId == r.Key).Seats.Single(hs => hs.SeatNumber == st.Key).Id, Tarriff = Enum.Parse<TarriffType>(st.Value) }));
        var createReservationDto = new CreateReservationDto() { CinemaShowId = id, Seats = takenSeats.ToList() };

        if (JSRuntime != null)
        {
            try
            {
                var response = await AuthorizedHttpClient.Client.PostAsJsonAsync(ApiCallUrls.ReservationForCinemaShow(id), createReservationDto);
                if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
                {
                    await JSRuntime.InvokeVoidAsync("alert", Localizer["ReservationChairsAlreadyTaken"].ToString());
                }
                else
                {
                    var createdReservation = await response.Content.ReadFromJsonAsync<ReservationDto>();
                    if (createdReservation != null)
                    {
                        Navigation.NavigateTo($"reservations/{createdReservation.Id}");
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("alert", Localizer["ReservationCreationFailed"].ToString());
                    }
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }
}