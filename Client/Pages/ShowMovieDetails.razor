@page "/movie/{id:long}"
@using FilmFlow.Shared.Dto
@inherits BaseComponent

@if (_movie != null)
{
	<div class="row p-3">
		<div class="col-sm-12 col-md-6 col-lg-3">
			<div class="card m-4 p-0" style="background-color: #ffffff96">
				<img src="@_movie.ImageUrl" class="card-img-top img-fluid" alt="...">
				<div class="card-body">
					<h5 class="card-title">@_movie.Title</h5>
					<ul>
						<li>@Localizer["Category"]: @_movie.Category</li>
						<li>@Localizer["AgeRating"]: @_movie.MinAge</li>
						<li>@Localizer["Language"]: @_movie.Language</li>
					</ul>
					<p class="card-text">@_movie.Description</p>
				</div>
			</div>
		</div>
		<div class="col-sm-12 col-md-6 col-lg-9">
			<div class="text-center row p-3">
				<div class="col-12"><h3>@Localizer["UpcomingShow"]</h3></div>
				@if (_shows != null)
				{
					@if (_shows.Count > 0)
					{
						@foreach (var show in _shows)
						{
							<div class="col-sm-12 col-md-6 col-lg-4">
								<div class="card p-3 m-3" style="background-color: #ffffff96;">
									<div class="card-body">
										<h5 class="card-title">@Localizer["Hall"] @show.CinemaHallId</h5>
										<h6 class="card-subtitle mb-2 text-muted">@show.Start.ToShortDateString()</h6>
										<p class="card-text">@show.Start.ToShortTimeString() - @show.End.ToShortTimeString()</p>
										<a href="cinemashow/@show.Id" class="btn btn-danger">@Localizer["ReserveNow"]</a>
									</div>
								</div>
							</div>
						}
					}
					else
					{
						<h4>@Localizer["NoMoreShows"]</h4>
					}
				}
				else
				{
					<h4>@Localizer["Loading"]...</h4>
				}
			</div>
		</div>
	</div>
}
else
{
	<h4>@Localizer["Loading"]...</h4>
}

@code {
	[Parameter]
	public long Id { get; set; }

	private MovieDto? _movie;
	private List<CinemaShowDto>? _shows;

	protected override async Task OnInitializedAsync()
	{
		_movie = await AnonymousHttpClient.Client.GetFromJsonAsync<MovieDto>($"/api/Movies/{Id}");
		var shows = await AnonymousHttpClient.Client.GetFromJsonAsync<List<CinemaShowDto>>($"/api/Movies/{Id}/shows");
		
		if (shows != null)
		{
			_shows = shows.Where(show => !show.IsSecret && show.Start > DateTime.Now)
				.OrderBy(s => s.Start)
				.ToList();
		}
	}
}
