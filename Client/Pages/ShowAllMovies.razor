@page "/movies"
@using FilmFlow.Shared.Dto
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using FilmFlow.Shared
@inject HttpClient Http
@inherits BaseComponent

<div class="p-3">
	<h3 class="d-flex">@Localizer["Movies"]</h3>
	<input type="search" id="movieSearch" class="form-control" placeholder="@Localizer["SearchForMovies"]" aria-label="Search" @bind="searchText" @oninput="UpdateOnSearch" />
	<div class="row mt-3">
		<div class="col-md-3">
			<label for="ageFilter">@Localizer["AgeRating"]: </label>
			<select id="ageFilter" class="form-select" @bind="ageFilter">
				<option value="">@Localizer["SelectAgeRating"]</option>
				@if (ageOptions != null) {
					@foreach (var age in ageOptions)
					{
						<option value="@age">@age+</option>
					}
				}
			</select>
		</div>
		<div class="col-md-3">
			<label for="languageFilter">@Localizer["Language"]: </label>
			<select id="languageFilter" class="form-select" @bind="languageFilter">
				<option value="">@Localizer["SelectLanguage"]</option>
				@if (allLanguages != null)
				{
					@foreach (var lang in allLanguages)
					{
						<option value="@lang">@lang</option>
					}
				}
			</select>
		</div>
		<div class="col-md-3">
			<label for="categoryFilter">@Localizer["Category"]: </label>
			<select id="categoryFilter" class="form-select" @bind="categoryFilter">
				<option value="">@Localizer["SelectCategory"]</option>
				@if (allCategories != null)
				{
					@foreach (var cat in allCategories)
					{
						<option value="@cat">@cat</option>
					}
				}
			</select>
		</div>
	</div>
</div>


@if (movies != null)
{

	<div class="d-flex p-3 row">
		@foreach (MovieDto movie in filteredMovies)
		{
			<div class="card m-4" style="width: 18rem; border: 0px; background-color: #ffffff96; padding: 0px !important;">
				<img src="@movie.ImageUrl" class="card-img-top" alt="...">
				<div class="card-body">
					<h5 class="card-title">@movie.Title</h5>
					<ul>
						<li>@Localizer["Category"]: @movie.Category</li>
						<li>@Localizer["AgeRating"]: @movie.MinAge</li>
						<li>@Localizer["Language"]: @movie.Language</li>
					</ul>
					<p class="card-text">@movie.Description</p>
					<a href="movie/@movie.Id" class="btn btn-danger">@Localizer["MoreAboutThisMovie"]</a>
				</div>
			</div>
		}
	</div>
	@if (!filteredMovies.Any())
	{
		<h3 class="p-3">@Localizer["NoMoviesMatchinYourSearchCriterea"]!</h3>
	}
}
else
{
	<p>@Localizer["Loading"]...</p>
}

@code {
	string searchText = "";
	string ageFilter = "";
	string languageFilter = "";
	string categoryFilter = "";
	private List<MovieDto>? movies;
	string[] allLanguages = new string[0];
	string[] allCategories = new string[0];
	int[] ageOptions = new int[0];

	private IEnumerable<MovieDto> filteredMovies
	{
		get
		{
			if (movies == null) return Enumerable.Empty<MovieDto>();
			var query = movies.AsEnumerable();
			if (!string.IsNullOrEmpty(searchText))
			{
				query = query.Where(m => m.Title.Contains(searchText, StringComparison.InvariantCultureIgnoreCase));
			}
			if (!string.IsNullOrEmpty(ageFilter))
			{
				int minAge = int.Parse(ageFilter);
				query = query.Where(m => m.MinAge >= minAge);
			}
			if (!string.IsNullOrEmpty(languageFilter))
			{
				query = query.Where(m => m.Language == languageFilter);
			}
			if (!string.IsNullOrEmpty(categoryFilter))
			{
				query = query.Where(m => m.Category == categoryFilter);
			}
			return query;
		}
	}
	private bool hasMatchingMovies
	{
		get
		{
			return filteredMovies.Any();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var movies = await Http.GetFromJsonAsync<MovieDto[]>("/api/Movies");
			if (movies != null)
			{
				this.movies = movies.ToList<MovieDto>();
				ageOptions = movies.Select(m => m.MinAge).Distinct().ToArray();
				allLanguages = movies.Select(m => m.Language).Distinct().ToArray();
				allCategories = movies.Select(m => m.Category).Distinct().ToArray();
			}
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
	private void UpdateOnSearch(ChangeEventArgs args)
	{
		searchText = args.Value.ToString();
	}
}