@page "/movies"
@using FilmFlow.Shared.Dto
@inherits BaseComponent

<div class="p-3">
	<h3 class="d-flex">@Localizer["Movies"]</h3>
	<input type="search" id="movieSearch" class="form-control" placeholder="@Localizer["SearchForMovies"]" aria-label="Search" @bind="_searchText" @oninput="UpdateOnSearch" />
	<div class="row mt-3">
		<div class="col-md-3">
			<label for="ageFilter">@Localizer["AgeRating"]: </label>
			<select id="ageFilter" class="form-select" @bind="_ageFilter">
				<option value="">@Localizer["SelectAgeRating"]</option>
				@foreach (var age in _ageOptions)
				{
					<option value="@age">@age+</option>
				}
			</select>
		</div>
		<div class="col-md-3">
			<label for="languageFilter">@Localizer["Language"]: </label>
			<select id="languageFilter" class="form-select" @bind="_languageFilter">
				<option value="">@Localizer["SelectLanguage"]</option>
				@foreach (var lang in _allLanguages)
				{
					<option value="@lang">@lang</option>
				}
			</select>
		</div>
		<div class="col-md-3">
			<label for="categoryFilter">@Localizer["Category"]: </label>
			<select id="categoryFilter" class="form-select" @bind="_categoryFilter">
				<option value="">@Localizer["SelectCategory"]</option>
				@foreach (var cat in _allCategories)
				{
					<option value="@cat">@cat</option>
				}
			</select>
		</div>
	</div>
</div>

@if (_movies != null)
{
	<div class="row p-3">
		@foreach (var movie in FilteredMovies)
		{
			<div class="col-sm-12 col-md-6 col-lg-3">
				<div class="card m-4 p-0" style="background-color: #ffffff96; max-width: 400px;">
					<img src="@movie.ImageUrl" class="card-img-top img-fluid" alt="...">
					<div class="card-body">
						<h5 class="card-title">@movie.Title</h5>
						<ul>
							<li>@Localizer["Category"]: @movie.Category</li>
							<li>@Localizer["AgeRating"]: @movie.MinAge</li>
							<li>@Localizer["Language"]: @movie.Language</li>
						</ul>
						<p class="card-text">@movie.Description</p>
						<a href="movie/@movie.Id" class="btn btn-danger">
							@Localizer["MoreAboutThisMovie"]<span class="material-icons" style="font-size: 15px;">
								arrow_forward</span>
						</a>
					</div>
				</div>
			</div>
		}
	</div>
	@if (!FilteredMovies.Any())
	{
		<h3 class="p-3">@Localizer["NoMoviesMatchingYourSearchCriteria"]!</h3>
	}
}
else
{
	<p>@Localizer["Loading"]...</p>
}

@code {
	private string _searchText = "";
	private string _ageFilter = "";
	private string _languageFilter = "";
	private string _categoryFilter = "";
	private List<MovieDto>? _movies;
	private string[] _allLanguages = Array.Empty<string>();
	private string[] _allCategories = Array.Empty<string>();
	private int[] _ageOptions = Array.Empty<int>();

	private IEnumerable<MovieDto> FilteredMovies
	{
		get
		{
			if (_movies == null) return Enumerable.Empty<MovieDto>();
			var query = _movies.AsEnumerable();
			if (!string.IsNullOrEmpty(_searchText))
			{
				query = query.Where(m => m.Title.Contains(_searchText, StringComparison.InvariantCultureIgnoreCase));
			}
			if (!string.IsNullOrEmpty(_ageFilter))
			{
				var minAge = int.Parse(_ageFilter);
				query = query.Where(m => m.MinAge >= minAge);
			}
			if (!string.IsNullOrEmpty(_languageFilter))
			{
				query = query.Where(m => m.Language == _languageFilter);
			}
			if (!string.IsNullOrEmpty(_categoryFilter))
			{
				query = query.Where(m => m.Category == _categoryFilter);
			}
			return query;
		}
	}

	private bool HasMatchingMovies => FilteredMovies.Any();

	protected override async Task OnInitializedAsync()
	{
		var movies = await AnonymousHttpClient.Client.GetFromJsonAsync<MovieDto[]>(ApiCallUrls.Movies());
		if (movies != null)
		{
			this._movies = movies.ToList();
			_ageOptions = movies.Select(m => m.MinAge).Distinct().ToArray();
			_allLanguages = movies.Select(m => m.Language).Distinct().ToArray();
			_allCategories = movies.Select(m => m.Category).Distinct().ToArray();
		}
	}

	private void UpdateOnSearch(ChangeEventArgs args)
	{
		_searchText = args.Value?.ToString() ?? "";
	}
}