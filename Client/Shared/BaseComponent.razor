@using FilmFlow.Client.Auth.Interfaces;
@using Microsoft.Extensions.Localization;
@using System.Globalization;
@inject IStringLocalizerFactory localizerFactory
@inject IAnonymousHttpClient anonymousHttpClient
@inject IAuthorizedHttpClient authorizedHttpClient
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@code {
    public IStringLocalizer Localizer = null!;
    public IAnonymousHttpClient AnonymousHttpClient = null!;
    public IAuthorizedHttpClient AuthorizedHttpClient = null!;

    private string _browserLanguage = "en-US";
    public string SelectedLanguage
    {
        get => _browserLanguage;
        set
        {
            if (value == _browserLanguage) return;
            #pragma warning disable
            ChangeLanguage(value);
            #pragma warning restore
        }
    }

    protected override void OnInitialized()
    {
        Localizer = localizerFactory.Create("FilmFlow.Client.Resources", "FilmFlow.Client");
        AnonymousHttpClient = anonymousHttpClient;
        AuthorizedHttpClient = authorizedHttpClient;
    }

    protected override async Task OnInitializedAsync()
    {
        var lang = await JsRuntime.InvokeAsync<string?>("localStorage.getItem", Program.LanguageKeyName) ?? "en-US";
        _browserLanguage = lang;
    }

    private async Task ChangeLanguage(string value)
    {
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", Program.LanguageKeyName, value ?? "en-US");
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}
